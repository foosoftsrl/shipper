// Generated from Config.g4 by ANTLR 4.9.1

package com.logstash;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class ConfigLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.9.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		INPUT=1, FILTER=2, OUTPUT=3, LBRACE=4, RBRACE=5, LPAREN=6, RPAREN=7, LBRACKET=8, 
		RBRACKET=9, QMARK=10, HASHROCKET=11, GT=12, GE=13, LT=14, LE=15, EQ=16, 
		NEQ=17, BANG=18, COMA=19, IN=20, NOT=21, MATCH=22, NOT_MATCH=23, AND=24, 
		OR=25, XOR=26, NAND=27, IF=28, ELSE=29, STRING=30, REGEX=31, DECIMAL=32, 
		IDENTIFIER=33, WS=34, COMMENT=35;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"INPUT", "FILTER", "OUTPUT", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
			"LBRACKET", "RBRACKET", "QMARK", "HASHROCKET", "GT", "GE", "LT", "LE", 
			"EQ", "NEQ", "BANG", "COMA", "IN", "NOT", "MATCH", "NOT_MATCH", "AND", 
			"OR", "XOR", "NAND", "IF", "ELSE", "NL", "HASH", "SLASH", "BSLASH", "DQUOTE", 
			"SQUOTE", "DQ_STRING", "SQ_STRING", "STRING", "FOCC", "RE_char", "RE_alter", 
			"RE_chgroup", "RE_quant", "RE_opt", "RE_star", "RE_plus", "RE_occ", "RE_group", 
			"RE_escape", "REGEX", "DECIMAL", "IDENTIFIER", "WS", "COMMENT"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'input'", "'filter'", "'output'", "'{'", "'}'", "'('", "')'", 
			"'['", "']'", "'?'", "'=>'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", 
			"'!'", "','", "'in'", "'not'", "'=~'", "'!~'", "'and'", "'or'", "'xor'", 
			"'nand'", "'if'", "'else'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "INPUT", "FILTER", "OUTPUT", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
			"LBRACKET", "RBRACKET", "QMARK", "HASHROCKET", "GT", "GE", "LT", "LE", 
			"EQ", "NEQ", "BANG", "COMA", "IN", "NOT", "MATCH", "NOT_MATCH", "AND", 
			"OR", "XOR", "NAND", "IF", "ELSE", "STRING", "REGEX", "DECIMAL", "IDENTIFIER", 
			"WS", "COMMENT"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public ConfigLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Config.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2%\u01b8\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3"+
		"\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3"+
		"\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\24\3"+
		"\24\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3"+
		"\31\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3"+
		"\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3 \3 \3!\3"+
		"!\3\"\3\"\3#\3#\3$\3$\3%\3%\7%\u00dc\n%\f%\16%\u00df\13%\3%\3%\3&\3&\7"+
		"&\u00e5\n&\f&\16&\u00e8\13&\3&\3&\3\'\3\'\5\'\u00ee\n\'\3(\3(\7(\u00f2"+
		"\n(\f(\16(\u00f5\13(\3(\7(\u00f8\n(\f(\16(\u00fb\13(\3(\7(\u00fe\n(\f"+
		"(\16(\u0101\13(\3(\3(\7(\u0105\n(\f(\16(\u0108\13(\3(\6(\u010b\n(\r(\16"+
		"(\u010c\3(\6(\u0110\n(\r(\16(\u0111\3(\7(\u0115\n(\f(\16(\u0118\13(\3"+
		"(\5(\u011b\n(\5(\u011d\n(\3(\7(\u0120\n(\f(\16(\u0123\13(\3(\3(\3)\3)"+
		"\3*\3*\3*\3*\3*\3*\5*\u012f\n*\3*\3*\3*\6*\u0134\n*\r*\16*\u0135\3+\3"+
		"+\3+\6+\u013b\n+\r+\16+\u013c\3+\3+\3,\3,\3,\5,\u0144\n,\3,\5,\u0147\n"+
		",\3-\3-\3-\3-\3-\3-\3-\5-\u0150\n-\3-\3-\3.\3.\3.\3.\3.\3.\3.\5.\u015b"+
		"\n.\3.\3.\3/\3/\3/\3/\3/\3/\3/\5/\u0166\n/\3/\3/\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\5\60\u0171\n\60\3\60\3\60\3\61\3\61\3\61\3\61\3\62\3\62"+
		"\3\62\3\62\5\62\u017d\n\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\7\63\u0188\n\63\f\63\16\63\u018b\13\63\3\63\3\63\3\64\5\64\u0190\n\64"+
		"\3\64\6\64\u0193\n\64\r\64\16\64\u0194\3\64\3\64\6\64\u0199\n\64\r\64"+
		"\16\64\u019a\5\64\u019d\n\64\3\65\3\65\7\65\u01a1\n\65\f\65\16\65\u01a4"+
		"\13\65\3\66\6\66\u01a7\n\66\r\66\16\66\u01a8\3\66\3\66\3\67\3\67\6\67"+
		"\u01af\n\67\r\67\16\67\u01b0\3\67\3\67\5\67\u01b5\n\67\3\67\3\67\3\u01b0"+
		"\28\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35"+
		"\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36"+
		";\37=\2?\2A\2C\2E\2G\2I\2K\2M O\2Q\2S\2U\2W\2Y\2[\2]\2_\2a\2c\2e!g\"i"+
		"#k$m%\3\2\n\3\2$$\3\2))\3\2\62;\t\2$$)-\61\61<<AA]_}\177\4\2\60\60yy\5"+
		"\2C\\aac|\7\2//\62;C\\aac|\5\2\13\f\16\17\"\"\2\u01d7\2\3\3\2\2\2\2\5"+
		"\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2"+
		"\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33"+
		"\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2"+
		"\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2"+
		"\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2M\3\2\2\2"+
		"\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\3o\3\2\2\2\5u"+
		"\3\2\2\2\7|\3\2\2\2\t\u0083\3\2\2\2\13\u0085\3\2\2\2\r\u0087\3\2\2\2\17"+
		"\u0089\3\2\2\2\21\u008b\3\2\2\2\23\u008d\3\2\2\2\25\u008f\3\2\2\2\27\u0091"+
		"\3\2\2\2\31\u0094\3\2\2\2\33\u0096\3\2\2\2\35\u0099\3\2\2\2\37\u009b\3"+
		"\2\2\2!\u009e\3\2\2\2#\u00a1\3\2\2\2%\u00a4\3\2\2\2\'\u00a6\3\2\2\2)\u00a8"+
		"\3\2\2\2+\u00ab\3\2\2\2-\u00af\3\2\2\2/\u00b2\3\2\2\2\61\u00b5\3\2\2\2"+
		"\63\u00b9\3\2\2\2\65\u00bc\3\2\2\2\67\u00c0\3\2\2\29\u00c5\3\2\2\2;\u00c8"+
		"\3\2\2\2=\u00cd\3\2\2\2?\u00cf\3\2\2\2A\u00d1\3\2\2\2C\u00d3\3\2\2\2E"+
		"\u00d5\3\2\2\2G\u00d7\3\2\2\2I\u00d9\3\2\2\2K\u00e2\3\2\2\2M\u00ed\3\2"+
		"\2\2O\u00ef\3\2\2\2Q\u0126\3\2\2\2S\u0133\3\2\2\2U\u0137\3\2\2\2W\u0143"+
		"\3\2\2\2Y\u014f\3\2\2\2[\u015a\3\2\2\2]\u0165\3\2\2\2_\u0170\3\2\2\2a"+
		"\u0174\3\2\2\2c\u0178\3\2\2\2e\u017e\3\2\2\2g\u018f\3\2\2\2i\u019e\3\2"+
		"\2\2k\u01a6\3\2\2\2m\u01ac\3\2\2\2op\7k\2\2pq\7p\2\2qr\7r\2\2rs\7w\2\2"+
		"st\7v\2\2t\4\3\2\2\2uv\7h\2\2vw\7k\2\2wx\7n\2\2xy\7v\2\2yz\7g\2\2z{\7"+
		"t\2\2{\6\3\2\2\2|}\7q\2\2}~\7w\2\2~\177\7v\2\2\177\u0080\7r\2\2\u0080"+
		"\u0081\7w\2\2\u0081\u0082\7v\2\2\u0082\b\3\2\2\2\u0083\u0084\7}\2\2\u0084"+
		"\n\3\2\2\2\u0085\u0086\7\177\2\2\u0086\f\3\2\2\2\u0087\u0088\7*\2\2\u0088"+
		"\16\3\2\2\2\u0089\u008a\7+\2\2\u008a\20\3\2\2\2\u008b\u008c\7]\2\2\u008c"+
		"\22\3\2\2\2\u008d\u008e\7_\2\2\u008e\24\3\2\2\2\u008f\u0090\7A\2\2\u0090"+
		"\26\3\2\2\2\u0091\u0092\7?\2\2\u0092\u0093\7@\2\2\u0093\30\3\2\2\2\u0094"+
		"\u0095\7@\2\2\u0095\32\3\2\2\2\u0096\u0097\7@\2\2\u0097\u0098\7?\2\2\u0098"+
		"\34\3\2\2\2\u0099\u009a\7>\2\2\u009a\36\3\2\2\2\u009b\u009c\7>\2\2\u009c"+
		"\u009d\7?\2\2\u009d \3\2\2\2\u009e\u009f\7?\2\2\u009f\u00a0\7?\2\2\u00a0"+
		"\"\3\2\2\2\u00a1\u00a2\7#\2\2\u00a2\u00a3\7?\2\2\u00a3$\3\2\2\2\u00a4"+
		"\u00a5\7#\2\2\u00a5&\3\2\2\2\u00a6\u00a7\7.\2\2\u00a7(\3\2\2\2\u00a8\u00a9"+
		"\7k\2\2\u00a9\u00aa\7p\2\2\u00aa*\3\2\2\2\u00ab\u00ac\7p\2\2\u00ac\u00ad"+
		"\7q\2\2\u00ad\u00ae\7v\2\2\u00ae,\3\2\2\2\u00af\u00b0\7?\2\2\u00b0\u00b1"+
		"\7\u0080\2\2\u00b1.\3\2\2\2\u00b2\u00b3\7#\2\2\u00b3\u00b4\7\u0080\2\2"+
		"\u00b4\60\3\2\2\2\u00b5\u00b6\7c\2\2\u00b6\u00b7\7p\2\2\u00b7\u00b8\7"+
		"f\2\2\u00b8\62\3\2\2\2\u00b9\u00ba\7q\2\2\u00ba\u00bb\7t\2\2\u00bb\64"+
		"\3\2\2\2\u00bc\u00bd\7z\2\2\u00bd\u00be\7q\2\2\u00be\u00bf\7t\2\2\u00bf"+
		"\66\3\2\2\2\u00c0\u00c1\7p\2\2\u00c1\u00c2\7c\2\2\u00c2\u00c3\7p\2\2\u00c3"+
		"\u00c4\7f\2\2\u00c48\3\2\2\2\u00c5\u00c6\7k\2\2\u00c6\u00c7\7h\2\2\u00c7"+
		":\3\2\2\2\u00c8\u00c9\7g\2\2\u00c9\u00ca\7n\2\2\u00ca\u00cb\7u\2\2\u00cb"+
		"\u00cc\7g\2\2\u00cc<\3\2\2\2\u00cd\u00ce\7\f\2\2\u00ce>\3\2\2\2\u00cf"+
		"\u00d0\7%\2\2\u00d0@\3\2\2\2\u00d1\u00d2\7\61\2\2\u00d2B\3\2\2\2\u00d3"+
		"\u00d4\7^\2\2\u00d4D\3\2\2\2\u00d5\u00d6\7$\2\2\u00d6F\3\2\2\2\u00d7\u00d8"+
		"\7)\2\2\u00d8H\3\2\2\2\u00d9\u00dd\5E#\2\u00da\u00dc\n\2\2\2\u00db\u00da"+
		"\3\2\2\2\u00dc\u00df\3\2\2\2\u00dd\u00db\3\2\2\2\u00dd\u00de\3\2\2\2\u00de"+
		"\u00e0\3\2\2\2\u00df\u00dd\3\2\2\2\u00e0\u00e1\5E#\2\u00e1J\3\2\2\2\u00e2"+
		"\u00e6\5G$\2\u00e3\u00e5\n\3\2\2\u00e4\u00e3\3\2\2\2\u00e5\u00e8\3\2\2"+
		"\2\u00e6\u00e4\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e9\3\2\2\2\u00e8\u00e6"+
		"\3\2\2\2\u00e9\u00ea\5G$\2\u00eaL\3\2\2\2\u00eb\u00ee\5I%\2\u00ec\u00ee"+
		"\5K&\2\u00ed\u00eb\3\2\2\2\u00ed\u00ec\3\2\2\2\u00eeN\3\2\2\2\u00ef\u00f3"+
		"\7}\2\2\u00f0\u00f2\5k\66\2\u00f1\u00f0\3\2\2\2\u00f2\u00f5\3\2\2\2\u00f3"+
		"\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u011c\3\2\2\2\u00f5\u00f3\3\2"+
		"\2\2\u00f6\u00f8\t\4\2\2\u00f7\u00f6\3\2\2\2\u00f8\u00fb\3\2\2\2\u00f9"+
		"\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00ff\3\2\2\2\u00fb\u00f9\3\2"+
		"\2\2\u00fc\u00fe\5k\66\2\u00fd\u00fc\3\2\2\2\u00fe\u0101\3\2\2\2\u00ff"+
		"\u00fd\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0102\3\2\2\2\u0101\u00ff\3\2"+
		"\2\2\u0102\u0106\7.\2\2\u0103\u0105\5k\66\2\u0104\u0103\3\2\2\2\u0105"+
		"\u0108\3\2\2\2\u0106\u0104\3\2\2\2\u0106\u0107\3\2\2\2\u0107\u010a\3\2"+
		"\2\2\u0108\u0106\3\2\2\2\u0109\u010b\t\4\2\2\u010a\u0109\3\2\2\2\u010b"+
		"\u010c\3\2\2\2\u010c\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u011d\3\2"+
		"\2\2\u010e\u0110\t\4\2\2\u010f\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111"+
		"\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0116\3\2\2\2\u0113\u0115\5k"+
		"\66\2\u0114\u0113\3\2\2\2\u0115\u0118\3\2\2\2\u0116\u0114\3\2\2\2\u0116"+
		"\u0117\3\2\2\2\u0117\u011a\3\2\2\2\u0118\u0116\3\2\2\2\u0119\u011b\7."+
		"\2\2\u011a\u0119\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011d\3\2\2\2\u011c"+
		"\u00f9\3\2\2\2\u011c\u010f\3\2\2\2\u011d\u0121\3\2\2\2\u011e\u0120\5k"+
		"\66\2\u011f\u011e\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f\3\2\2\2\u0121"+
		"\u0122\3\2\2\2\u0122\u0124\3\2\2\2\u0123\u0121\3\2\2\2\u0124\u0125\7\177"+
		"\2\2\u0125P\3\2\2\2\u0126\u0127\n\5\2\2\u0127R\3\2\2\2\u0128\u012f\5Q"+
		")\2\u0129\u012a\7*\2\2\u012a\u012b\5e\63\2\u012b\u012c\7+\2\2\u012c\u012f"+
		"\3\2\2\2\u012d\u012f\5U+\2\u012e\u0128\3\2\2\2\u012e\u0129\3\2\2\2\u012e"+
		"\u012d\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u0131\7~\2\2\u0131\u0132\5e\63"+
		"\2\u0132\u0134\3\2\2\2\u0133\u012e\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0133"+
		"\3\2\2\2\u0135\u0136\3\2\2\2\u0136T\3\2\2\2\u0137\u013a\7]\2\2\u0138\u013b"+
		"\5Q)\2\u0139\u013b\5c\62\2\u013a\u0138\3\2\2\2\u013a\u0139\3\2\2\2\u013b"+
		"\u013c\3\2\2\2\u013c\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013e\3\2"+
		"\2\2\u013e\u013f\7_\2\2\u013fV\3\2\2\2\u0140\u0144\5[.\2\u0141\u0144\5"+
		"]/\2\u0142\u0144\5_\60\2\u0143\u0140\3\2\2\2\u0143\u0141\3\2\2\2\u0143"+
		"\u0142\3\2\2\2\u0144\u0146\3\2\2\2\u0145\u0147\5\25\13\2\u0146\u0145\3"+
		"\2\2\2\u0146\u0147\3\2\2\2\u0147X\3\2\2\2\u0148\u0150\5Q)\2\u0149\u0150"+
		"\5U+\2\u014a\u0150\5c\62\2\u014b\u014c\7*\2\2\u014c\u014d\5e\63\2\u014d"+
		"\u014e\7+\2\2\u014e\u0150\3\2\2\2\u014f\u0148\3\2\2\2\u014f\u0149\3\2"+
		"\2\2\u014f\u014a\3\2\2\2\u014f\u014b\3\2\2\2\u0150\u0151\3\2\2\2\u0151"+
		"\u0152\7A\2\2\u0152Z\3\2\2\2\u0153\u015b\5Q)\2\u0154\u015b\5U+\2\u0155"+
		"\u015b\5c\62\2\u0156\u0157\7*\2\2\u0157\u0158\5e\63\2\u0158\u0159\7+\2"+
		"\2\u0159\u015b\3\2\2\2\u015a\u0153\3\2\2\2\u015a\u0154\3\2\2\2\u015a\u0155"+
		"\3\2\2\2\u015a\u0156\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u015d\7,\2\2\u015d"+
		"\\\3\2\2\2\u015e\u0166\5Q)\2\u015f\u0166\5U+\2\u0160\u0166\5c\62\2\u0161"+
		"\u0162\7*\2\2\u0162\u0163\5e\63\2\u0163\u0164\7+\2\2\u0164\u0166\3\2\2"+
		"\2\u0165\u015e\3\2\2\2\u0165\u015f\3\2\2\2\u0165\u0160\3\2\2\2\u0165\u0161"+
		"\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u0168\7-\2\2\u0168^\3\2\2\2\u0169\u0171"+
		"\5Q)\2\u016a\u0171\5U+\2\u016b\u0171\5c\62\2\u016c\u016d\7*\2\2\u016d"+
		"\u016e\5e\63\2\u016e\u016f\7+\2\2\u016f\u0171\3\2\2\2\u0170\u0169\3\2"+
		"\2\2\u0170\u016a\3\2\2\2\u0170\u016b\3\2\2\2\u0170\u016c\3\2\2\2\u0171"+
		"\u0172\3\2\2\2\u0172\u0173\5O(\2\u0173`\3\2\2\2\u0174\u0175\7*\2\2\u0175"+
		"\u0176\5e\63\2\u0176\u0177\7+\2\2\u0177b\3\2\2\2\u0178\u017c\5C\"\2\u0179"+
		"\u017d\5C\"\2\u017a\u017d\5A!\2\u017b\u017d\t\6\2\2\u017c\u0179\3\2\2"+
		"\2\u017c\u017a\3\2\2\2\u017c\u017b\3\2\2\2\u017dd\3\2\2\2\u017e\u0189"+
		"\5A!\2\u017f\u0188\7\60\2\2\u0180\u0188\5Q)\2\u0181\u0188\5S*\2\u0182"+
		"\u0188\5U+\2\u0183\u0188\5Y-\2\u0184\u0188\5W,\2\u0185\u0188\5a\61\2\u0186"+
		"\u0188\5c\62\2\u0187\u017f\3\2\2\2\u0187\u0180\3\2\2\2\u0187\u0181\3\2"+
		"\2\2\u0187\u0182\3\2\2\2\u0187\u0183\3\2\2\2\u0187\u0184\3\2\2\2\u0187"+
		"\u0185\3\2\2\2\u0187\u0186\3\2\2\2\u0188\u018b\3\2\2\2\u0189\u0187\3\2"+
		"\2\2\u0189\u018a\3\2\2\2\u018a\u018c\3\2\2\2\u018b\u0189\3\2\2\2\u018c"+
		"\u018d\5A!\2\u018df\3\2\2\2\u018e\u0190\7/\2\2\u018f\u018e\3\2\2\2\u018f"+
		"\u0190\3\2\2\2\u0190\u0192\3\2\2\2\u0191\u0193\t\4\2\2\u0192\u0191\3\2"+
		"\2\2\u0193\u0194\3\2\2\2\u0194\u0192\3\2\2\2\u0194\u0195\3\2\2\2\u0195"+
		"\u019c\3\2\2\2\u0196\u0198\7\60\2\2\u0197\u0199\t\4\2\2\u0198\u0197\3"+
		"\2\2\2\u0199\u019a\3\2\2\2\u019a\u0198\3\2\2\2\u019a\u019b\3\2\2\2\u019b"+
		"\u019d\3\2\2\2\u019c\u0196\3\2\2\2\u019c\u019d\3\2\2\2\u019dh\3\2\2\2"+
		"\u019e\u01a2\t\7\2\2\u019f\u01a1\t\b\2\2\u01a0\u019f\3\2\2\2\u01a1\u01a4"+
		"\3\2\2\2\u01a2\u01a0\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3j\3\2\2\2\u01a4"+
		"\u01a2\3\2\2\2\u01a5\u01a7\t\t\2\2\u01a6\u01a5\3\2\2\2\u01a7\u01a8\3\2"+
		"\2\2\u01a8\u01a6\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa"+
		"\u01ab\b\66\2\2\u01abl\3\2\2\2\u01ac\u01ae\5? \2\u01ad\u01af\13\2\2\2"+
		"\u01ae\u01ad\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b0\u01ae"+
		"\3\2\2\2\u01b1\u01b4\3\2\2\2\u01b2\u01b5\5=\37\2\u01b3\u01b5\7\2\2\3\u01b4"+
		"\u01b2\3\2\2\2\u01b4\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7\b\67"+
		"\2\2\u01b7n\3\2\2\2%\2\u00dd\u00e6\u00ed\u00f3\u00f9\u00ff\u0106\u010c"+
		"\u0111\u0116\u011a\u011c\u0121\u012e\u0135\u013a\u013c\u0143\u0146\u014f"+
		"\u015a\u0165\u0170\u017c\u0187\u0189\u018f\u0194\u019a\u019c\u01a2\u01a8"+
		"\u01b0\u01b4\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}