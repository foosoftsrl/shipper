input {
    file {
       path => "classpath:it/foosoft/shipper/files/clink.log"
       loop => true
    }
}

filter {
    if [message] =~ /^\/#/ {
        drop{}
    }

    mutate {
        remove_field => [ "host", "@timestamp", "command", "path" ]
        add_field => { "cdnName" => "cdncl" }
    }

    dissect {
        mapping => {
            "message" => '%{date}	%{time}	%{ip}	%{method}	%{uri}	%{response}	%{bytesSent}	%{responseTime}	%{referer}	%{userAgentLog}	%{?cookie}	%{?disId}	%{?headerSize}	%{cache}	%{?other}'
	    }
        remove_field => [ "message" ]
    }

    mutate {
# Create a timestamp in YYYY-mm-dd HH:MM:SS", joining "date" and "time", which can be removed
        add_field => {
            "timestamp" => "%{date} %{time}"
        }
        remove_field => [ "date", "time" ]

        convert => {
          "response" => "integer"
          "responseTime" => "float"
          "bytesSent" => "integer"
        }
    }

# Here we use our newly created timestamp attribute to patch the event timestamp
    date {
        locale => "en"
        timezone => "GMT"
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
        remove_field => [ "timestamp" ]
    }

    uriparse {
        source => "uri"
        remove_field => [ "uri" ]
        tag_on_failure => "relurl_grok_fail"
    }

    mutate {
        copy => {
          "path" => "relativeUrl"
          "host" => "nameServer"
        }
        remove_field => ["path", "host"]
    }
}


filter {
    if [relativeUrl] =~ /^.farmunica/ {
        farmunicapath {
          source => "relativeUrl"
        }
    }
}

filter {
        # Geolocalizzo l'IP del Client secondo il DB free GeoLite2-City
        geoip {
            source => "ip"
            target => "src_ip"
            database => "/etc/logstash/geoloc_db/GeoIP2-City.mmdb"
            default_database_type => "City"
        }

        # Geolocalizzo l'IP del Client secondo il DB free GeoLite2-ASN
        geoip {
            source => "ip"
            target => "src_ip"
                database => "/etc/logstash/geoloc_db/GeoIP2-ISP.mmdb"
            default_database_type => "ASN"
        }

        mutate {
          add_field => { "clientIpType" => "external" }
        }

        if "_geoip_lookup_failure" not in [tags] {
            mutate {
                remove_field => ["ip"]
            }
        }
}

filter {
        # Si fa il parsing dello User Agent
        useragent {
            source => "userAgentLog"
            regexes => "/etc/logstash/patterns/regexes.yaml"
            id => "userAgent"
            target => "userAgent"
        }

        # Se il parsing dello User Agent Ã¨ andato bene rimuove il campo userAgentLog
        #  che contiene la stringa catturata dai log, per risparmiare spazio
        if ([userAgent][os] !~ "Other") or
           ([userAgent][os_name] !~ "Other") or
           ([userAgent][name] !~ "Other") or
           ([userAgent][device] !~ "Other") {
            mutate {
                remove_field => ["userAgentLog"]
               # add_tag => ["useragent"]
            }
        }
}
